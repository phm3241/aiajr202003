<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>FirstWeb</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>


	<!-- 서블릿 등록하는 태그 엘리먼트 -->
	<servlet>
		<!-- 서블릿을 식별할 수 있는 이름 등록 -->
		<servlet-name>testServlet</servlet-name>
		<!-- 서블릿의 클래스 이름 : FullName -->
		<servlet-class>test.NowServlet</servlet-class>
	</servlet>


	<!-- 경로 맵핑(사용자가 어떤 요청 경로가 들어왔을 때 등록되어 있는 서블릿 중에 어떤 서블릿을 실행할 거냐) -->
	<!-- /hello 라는 요청경로가 들어오면, testServlet이라는 이름의 서블릿을 실행한다. 라고 경로를 맵핑. -->
	<servlet-mapping>
		<!-- 요청에 실행할 서블릿 이름 등록 -->
		<servlet-name>testServlet</servlet-name>

		<!-- http://localhost:8080/web/hello 사용자 요청경로 -->
		<url-pattern>/hello</url-pattern>
	</servlet-mapping>


	<!-- 데이터베이스 드라이버 로드 -->
	<servlet>
		<servlet-name>Loader</servlet-name>
		<servlet-class>jdbc.Loader</servlet-class>
		<init-param>
			<param-name>jdbcDriver</param-name>
			<param-value>oracle.jdbc.driver.OracleDriver,com.mysql.jdbc.Driver</param-value>
			<!-- StringTokenizer가 ,를 기준으로 잘라주므로.. 2개 같이 로드 가능하다. -->
		</init-param>
		<init-param>
			<param-name>msg</param-name>
			<param-value>hello~ JSP~~ </param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<!-- 서버실행할 때 1번 실행(드라이버로드) -->
	</servlet>




	<!-- 커넥션 풀 드라이버 등록 -->
	<servlet>
		<servlet-name>DBCPInit</servlet-name>
		<servlet-class>jdbc.DBCPInit</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>




	<!--상태코드의 에러페이지 설정 -->
	<error-page>
		<error-code>404</error-code>
		<location>/error/error_404.jsp</location>
	</error-page>

	<error-page>
		<error-code>500</error-code>
		<location>/error/error_500.jsp</location>
	</error-page>

	<!-- 에러타입별 에러페이지 설정 : 우선순위 먼저! -->
	<error-page>
		<exception-type>java.lang.NullPointerException</exception-type>
		<location>/error/error_null.jsp</location>
	</error-page>






	<!-- 필터 등록하는 태그 엘리먼트 -->
	<filter>
		<!-- 필터를 식별할 수 있는 이름 등록 -->
		<filter-name>loginCheckFilter</filter-name>
		<!-- 필터의 클래스 이름 : FullName -->
		<filter-class>filter.LoginFilter</filter-class>
	</filter>


	<!-- 경로 맵핑 -->
	<filter-mapping>
		<!-- 요청에 실행할 필터 이름 등록 -->
		<filter-name>loginCheckFilter</filter-name>
		<url-pattern>/mypage/*</url-pattern>
	</filter-mapping>






	<!-- 필터 등록하는 태그 엘리먼트 -->
	<filter>
		<!-- 필터를 식별할 수 있는 이름 등록 -->
		<filter-name>encodingFilter</filter-name>
		<!-- 필터의 클래스 이름 : FullName -->
		<filter-class>filter.CharacterEncodingFilter</filter-class>
	</filter>


	<!-- 경로 맵핑 -->
	<filter-mapping>
		<!-- 요청에 실행할 필터 이름 등록 -->
		<filter-name>encodingFilter</filter-name>

		<!-- 사용자의 모든 요청에 대해 필터 적용 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>







	<!-- 리스너 등록 -->
	<listener>
		<listener-class>listener.TestContextListener</listener-class>
	</listener>



	<!-- 경로를 저장해두고 외부에서 가져다 쓸 수 있다. 자바는 코드가 바뀌게 되면 다시 컴파일해야하므로.. 경로는 외부에 따로 
		빼두고 가져와서 쓰는 방식으로 한다. ServletContext를 가지고 있으면, .getServletContext 메서드로 이 경로를 
		가지고 와서 쓸 수 있다. ex. TestContextListener의 contextInitialized(WAS 시작 이벤트 메서드?) 
		에서 경로를 가져온다 -->
	<context-param>
		<param-name>uploadPath</param-name>
		<param-value>/uploadFile/member/photo</param-value>
		<!-- <param-value>/file</param-value> -->
	</context-param>





</web-app>












